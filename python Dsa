1.bitwise or of subarays
class Solution:
 def subarrayBitwiseORs(self, arr: List[int]) -> int:
arr=[1,2]
result=set()
curr={0}
for i in arr:
    curr={i} | { i | j for j in curr}
    result|=curr
print(len(result))



2.find peek element
o(n) time complexity approach
nums=[1,2]
a=0
for i in range(1,len(nums)):
    if(nums[i]<nums[i-1]):
        a=i-1
a=1  
print(a)
o(logn) time complexity approach

nums=[1,2,3,1]
l=0
r=len(nums)-1
        
while l<r:
    mid=(l+r)//2
    if nums[mid]>nums[mid+1]:
        r=mid
    elif nums[mid]<nums[mid+1]:
        l=mid+1       
print(l)




3. Matrix Diagonal Sum(1572)
mat = [[1,1,1,1],
       [1,1,1,1],
       [1,1,1,1],
       [1,1,1,1]]
j=len(mat)-1
sum=0
for i in range(len(mat)):
   
    if [i,i]==[i,j]:
        sum+=mat[i][i]
        j=j-1
        
    else:
        sum+=mat[i][i]+mat[i][j]
        j=j-1
    print(sum)
    
